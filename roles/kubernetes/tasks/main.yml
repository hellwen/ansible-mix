- name: Ensure the hostname
  hostname: name={{ hostname }}

- name: Create kubernetes group
  group: gid=1080 name=kube state=present

- name: Create kubernetes user
  user: uid=1080 name=kube group=kube

# create floder
- name: Create kubernetes floder
  file: path={{ item.path }} state=directory owner=kube group=kube mode=0755
  with_items:
  - { path: '/usr/local/kubernetes' }
  - { path: '/usr/local/kubernetes/cni' }
  - { path: '/usr/local/kubernetes/manifests' }

# kubernetes bin 
#- name: Copy kubelet
#  copy: src={{ item.src }} dest={{ item.dest }} owner=kube group=kube mode=0766
#  with_items:
#  - { src: kubelet, dest: /usr/local/bin/kubelet }
#  - { src: kube-proxy, dest: /usr/local/bin/kube-proxy }

# https://storage.googleapis.com/kubernetes-release/release/v1.5.2/bin/linux/amd64/kubectl
- name: Download kubelet
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{ kube_version }}/bin/linux/amd64/{{ item.name }}
    dest: /usr/local/bin/{{ item.name }}
    mode: 0555
  with_items:
  - { name: kubelet }
  - { name: kube-proxy }

# kubernetes config
- name: Kubelet config
  template: src={{ item.src }} dest={{ item.dest }}
  with_items:
  - { src: kubelet.j2, dest: /usr/local/kubernetes/kubelet }
  - { src: proxy.j2, dest: /usr/local/kubernetes/proxy }
  - { src: kubeconfig.j2, dest: /usr/local/kubernetes/kubeconfig }
  - { src: config.j2, dest: /usr/local/kubernetes/config }

# Eanble accounting
- name: Enable accounting
  replace:
    dest: /etc/systemd/system.conf
    regexp: "#{{ item.account }}"
    replace: "{{ item.account }}"
    backup: yes
  with_items:
  - { account: 'DefaultCPUAccounting=no' }
  - { account: 'DefaultMemoryAccounting=no' }

# service config
- name: Copy kubelet.service
  copy: src=kubelet.service dest=/etc/systemd/system/kubelet.service
  notify: restart kubelet

- name: Copy kube-proxy.service
  copy: src=kube-proxy.service dest=/etc/systemd/system/kube-proxy.service
  notify: restart kube-proxy
